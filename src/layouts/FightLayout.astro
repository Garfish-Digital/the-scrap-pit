---
// FightLayout.astro - Brutalist Combat Sports Layout
interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = "The Scrap Pit - Forged in Fire. Tested in Battle.", image = "/og-image.jpg" } = Astro.props;

// Ensure absolute URL for OG image
const absoluteImageUrl = new URL(image, Astro.url).href;

// Get current path for active nav state
const currentPath = Astro.url.pathname;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content={description}>
  <meta name="generator" content={Astro.generator}>
  <meta name="robots" content="noindex, nofollow" />
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content={Astro.url}>
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:image" content={absoluteImageUrl}>
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="630">
  <meta property="og:image:type" content="image/jpeg">
  <meta property="og:site_name" content="The Scrap Pit">
  
  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:url" content={Astro.url}>
  <meta property="twitter:title" content={title}>
  <meta property="twitter:description" content={description}>
  <meta property="twitter:image" content={absoluteImageUrl}>
  <meta property="twitter:image:alt" content="The Scrap Pit - Combat Sports Training Gym">
  
  <title>{title}</title>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  
  <!-- Preload Critical Fonts -->
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Bebas+Neue:wght@400&family=Space+Mono:wght@400;700&display=swap" as="style">
  
  <!-- Font Awesome Pro 7 - Add your Pro Kit URL here -->
    <script src="https://kit.fontawesome.com/950db21282.js" crossorigin="anonymous"></script>

  <!-- Global Styles -->
  <style lang="scss">
    @import '../styles/global.scss';
  </style>
</head>

<body class="cursor-grit">
  <!-- Enhanced Grit Cursor System -->
  <div id="grit-cursor" class="grit-cursor">
    <div class="cursor-core"></div>
    <div class="cursor-trail"></div>
  </div>
  <div id="cursor-trail-particles"></div>
  
  <!-- Navigation -->
  <nav class="nav-brutalist">
    <div class="container">
      <div class="nav-content">
        <a href="/" class="nav-logo">
          <span class="logo-text">THE SCRAP PIT</span>
        </a>
        
        <ul class="nav-links">
          <li><a href="/#training" class="nav-link">TRAINING</a></li>
          <li><a href="/#fighters" class="nav-link">FIGHTERS</a></li>
          <li><a href="/about" class={`nav-link ${currentPath === '/about' ? 'active' : ''}`}>ABOUT</a></li>
          <li><a href="/pricing" class={`nav-link ${currentPath === '/pricing' ? 'active' : ''}`}>PRICING</a></li>
          <li><a href="/contact" class={`nav-link ${currentPath === '/contact' ? 'active' : ''}`}>CONTACT</a></li>
        </ul>
      </div>
    </div>
  </nav>
  
  <!-- Main Content -->
  <main>
    <slot />
  </main>
  
  <!-- Footer -->
  <footer class="footer-brutalist">
    <div class="container">
      <div class="footer-content">
        <div class="footer-section">
          <h3>THE SCRAP PIT</h3>
          <p>Forged in Fire. Tested in Battle.</p>
        </div>
        
        <div class="footer-section">
          <h4>TRAINING</h4>
          <ul>
            <li><a href="#striking">Striking</a></li>
            <li><a href="#grappling">Grappling</a></li>
            <li><a href="#conditioning">Conditioning</a></li>
          </ul>
        </div>
        
        <div class="footer-section">
          <h4>CONNECT</h4>
          <ul>
            <li><a href="#contact">Contact</a></li>
            <li><a href="#location">Location</a></li>
            <li><a href="#schedule">Schedule</a></li>
          </ul>
        </div>
      </div>
      
      <div class="footer-bottom">
        <p>&copy; 2024 The Scrap Pit. All rights reserved.</p>
      </div>
    </div>
  </footer>
  
  <!-- JavaScript for Custom Cursor and Scroll Effects -->
  <script>
    // Enhanced Grit Cursor with Sharp Trail
    class GritCursor {
      constructor() {
        this.cursor = document.getElementById('grit-cursor');
        this.core = this.cursor.querySelector('.cursor-core');
        this.trail = this.cursor.querySelector('.cursor-trail');
        this.particleContainer = document.getElementById('cursor-trail-particles');
        
        this.pos = { x: 0, y: 0 };
        this.targetPos = { x: 0, y: 0 };
        this.velocity = { x: 0, y: 0 };
        this.particles = [];
        this.isHovering = false;
        this.clickRipples = [];
        
        this.init();
      }
      
      init() {
        // Mouse movement
        document.addEventListener('mousemove', (e) => {
          this.targetPos.x = e.clientX;
          this.targetPos.y = e.clientY;
          
          // Calculate velocity for particle generation
          this.velocity.x = e.clientX - this.pos.x;
          this.velocity.y = e.clientY - this.pos.y;
          
          // Generate trail particles on fast movement
          if (Math.abs(this.velocity.x) > 3 || Math.abs(this.velocity.y) > 3) {
            this.createTrailParticle();
          }
        });
        
        // Click effects
        document.addEventListener('mousedown', (e) => {
          this.createClickRipple(e.clientX, e.clientY);
          this.cursor.classList.add('clicking');
        });
        
        document.addEventListener('mouseup', () => {
          this.cursor.classList.remove('clicking');
        });
        
        // Hover effects for interactive elements
        const interactiveElements = document.querySelectorAll('a, button, .combat-btn, input, textarea, select');
        interactiveElements.forEach(el => {
          el.addEventListener('mouseenter', () => {
            this.isHovering = true;
            this.cursor.classList.add('hovering');
          });
          
          el.addEventListener('mouseleave', () => {
            this.isHovering = false;
            this.cursor.classList.remove('hovering');
          });
        });
        
        this.animate();
      }
      
      createTrailParticle() {
        const particle = document.createElement('div');
        particle.className = 'cursor-particle';
        
        // Random sharp angles for brutalist effect
        const angle = Math.random() * Math.PI * 2;
        const speed = Math.random() * 20 + 10;
        const size = Math.random() * 4 + 2;
        
        particle.style.width = size + 'px';
        particle.style.height = size + 'px';
        particle.style.position = 'fixed';
        particle.style.left = (this.pos.x - size/2) + 'px';
        particle.style.top = (this.pos.y - size/2) + 'px';
        
        // Sharp-edged particle with random red/gold color
        const colors = ['#E00000', '#CC9900', '#1A1A1A'];
        particle.style.background = colors[Math.floor(Math.random() * colors.length)];
        
        this.particleContainer.appendChild(particle);
        
        // Animate particle
        let life = 1;
        const decay = 0.02;
        let x = this.pos.x;
        let y = this.pos.y;
        const vx = Math.cos(angle) * speed * 0.1;
        const vy = Math.sin(angle) * speed * 0.1;
        
        const animateParticle = () => {
          life -= decay;
          x += vx;
          y += vy;
          
          particle.style.left = x + 'px';
          particle.style.top = y + 'px';
          particle.style.opacity = life;
          particle.style.transform = `scale(${life})`;
          
          if (life > 0) {
            requestAnimationFrame(animateParticle);
          } else {
            particle.remove();
          }
        };
        
        requestAnimationFrame(animateParticle);
      }
      
      createClickRipple(x, y) {
        const ripple = document.createElement('div');
        ripple.className = 'cursor-ripple';
        ripple.style.position = 'fixed';  
        ripple.style.left = (x - 10) + 'px';
        ripple.style.top = (y - 10) + 'px';
        
        this.particleContainer.appendChild(ripple);
        
        // Animate ripple expansion
        setTimeout(() => {
          ripple.style.transform = 'scale(10)';
          ripple.style.opacity = '0';
        }, 10);
        
        setTimeout(() => ripple.remove(), 600);
      }
      
      animate() {
        // Sharp, responsive cursor movement
        const ease = this.isHovering ? 0.3 : 0.15;
        this.pos.x += (this.targetPos.x - this.pos.x) * ease;
        this.pos.y += (this.targetPos.y - this.pos.y) * ease;
        
        // Update cursor position with proper centering
        this.cursor.style.transform = `translate(${this.pos.x - 12}px, ${this.pos.y - 12}px)`;
        
        // Dynamic trail length based on velocity
        const speed = Math.sqrt(this.velocity.x ** 2 + this.velocity.y ** 2);
        const trailScale = Math.min(speed * 0.1, 3);
        this.trail.style.transform = `scale(${1 + trailScale})`;
        
        requestAnimationFrame(() => this.animate());
      }
    }
    
    // Scroll-triggered Monochrome to Color Effect
    class ScrollColorReveal {
      constructor() {
        this.heroElement = document.querySelector('.hero-background.mono-to-color');
        this.otherElements = document.querySelectorAll('.mono-to-color:not(.hero-background)');
        this.init();
      }
      
      init() {
        // Standard observer for all non-hero mono-to-color elements
        const standardObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('in-view');
            } else {
              entry.target.classList.remove('in-view');
            }
          });
        }, {
          threshold: 0.5,
          rootMargin: '-20% 0px -20% 0px'
        });
        
        // Slower observer specifically for hero image
        const heroObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('in-view');
            } else {
              entry.target.classList.remove('in-view');
            }
          });
        }, {
          threshold: 0.7,
          rootMargin: '-30% 0px -30% 0px' // Much slower trigger for hero
        });
        
        // Apply observers
        this.otherElements.forEach(el => standardObserver.observe(el));
        if (this.heroElement) {
          heroObserver.observe(this.heroElement);
        }
      }
    }
    
    // Impact Button Effects
    class ImpactEffects {
      constructor() {
        this.buttons = document.querySelectorAll('.impact-flash');
        this.init();
      }
      
      init() {
        this.buttons.forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.target.classList.add('flash');
            setTimeout(() => {
              e.target.classList.remove('flash');
            }, 150);
          });
        });
      }
    }
    
    // Scroll-based Navigation Active States
    class ScrollNavigation {
      constructor() {
        this.navLinks = {
          training: document.querySelector('a[href="/#training"]'),
          fighters: document.querySelector('a[href="/#fighters"]')
        };
        this.sections = {
          training: document.getElementById('training'),
          fighters: document.getElementById('fighters')
        };
        this.init();
      }
      
      init() {
        // Only initialize on home page where sections exist
        if (!this.sections.training || !this.sections.fighters) return;
        
        // Check initial hash on page load
        this.handleInitialHash();
        
        const observerOptions = {
          root: null,
          rootMargin: '-20% 0px -60% 0px', // Trigger when section is 20% visible from top
          threshold: 0
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            const sectionId = entry.target.id;
            const navLink = this.navLinks[sectionId];
            
            if (navLink) {
              if (entry.isIntersecting) {
                navLink.classList.add('active');
              } else {
                navLink.classList.remove('active');
              }
            }
          });
        }, observerOptions);
        
        // Observe the sections
        Object.values(this.sections).forEach(section => {
          if (section) observer.observe(section);
        });
        
        // Listen for hash changes (when clicking nav links)
        window.addEventListener('hashchange', () => {
          this.handleHashChange();
        });
      }
      
      handleInitialHash() {
        const hash = window.location.hash;
        if (hash === '#training' && this.navLinks.training) {
          this.navLinks.training.classList.add('active');
        } else if (hash === '#fighters' && this.navLinks.fighters) {
          this.navLinks.fighters.classList.add('active');
        }
      }
      
      handleHashChange() {
        // Clear all active states first
        Object.values(this.navLinks).forEach(link => {
          if (link) link.classList.remove('active');
        });
        
        // Add active state based on new hash
        const hash = window.location.hash;
        if (hash === '#training' && this.navLinks.training) {
          this.navLinks.training.classList.add('active');
        } else if (hash === '#fighters' && this.navLinks.fighters) {
          this.navLinks.fighters.classList.add('active');
        }
      }
    }
    
    // Initialize all effects
    document.addEventListener('DOMContentLoaded', () => {
      new GritCursor();
      new ScrollColorReveal();
      new ImpactEffects();
      new ScrollNavigation();
    });
  </script>
</body>
</html>

<style lang="scss">
@import '../styles/variables';
@import '../styles/color_filters';

// Navigation Styles
.nav-brutalist {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background: $bg-primary;
  border-bottom: $border-primary;
  z-index: $z-header;
  
  .nav-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: $space-sm 0;
  }
  
  .nav-logo {
    .logo-text {
      font-family: $font-display;
      font-size: $font-size-large;
      font-weight: 400;
      color: $text-primary;
      text-decoration: none;
      letter-spacing: 0.1em;
    }
  }
  
  .nav-links {
    display: flex;
    list-style: none;
    gap: $space-lg;
    
    // Invisible spacers using pseudo-elements on li elements
    li {
      position: relative;
      
      &:not(:last-child)::after {
        content: '|';
        position: absolute;
        top: 50%;
        right: calc(-#{$space-lg} / 2);
        transform: translateY(-50%);
        color: rgba($text-primary, 0.15);
        font-weight: 300;
        font-size: $font-size-small;
        pointer-events: none;
        z-index: 1;
      }
    }
    
    .nav-link {
      font-family: $font-body;
      font-size: $font-size-normal;
      font-weight: 700;
      color: $text-primary;
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      border-bottom: 2px solid transparent;
      transition: all $transition-quick;
      position: relative;
      
      &:hover {
        border-bottom-color: $text-accent;
      }
      
      // Active state for current page
      &.active {
        color: $text-highlight;
        border-bottom-color: $text-highlight;
        
        // Add a subtle glow effect for active state
        &::before {
          content: '';
          position: absolute;
          top: -2px;
          left: -4px;
          right: -4px;
          bottom: -2px;
          background: rgba($championship-gold, 0.1);
          z-index: -1;
          clip-path: polygon(10% 0%, 90% 0%, 100% 25%, 100% 75%, 90% 100%, 10% 100%, 0% 75%, 0% 25%);
          opacity: 0;
          transition: opacity $transition-quick;
        }
        
        &:hover::before {
          opacity: 1;
        }
      }
    }
  }
}

// Main Content Spacing
main {
  margin-top: 80px; // Account for fixed nav
}

// Footer Styles
.footer-brutalist {
  background: $bg-dark;
  color: $text-inverse;
  padding: $space-xl 0 $space-md;
  border-top: $border-thick solid $text-accent;
  
  .footer-content {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: $space-lg;
    margin-bottom: $space-lg;
    
    @media (max-width: $breakpoint-md) {
      grid-template-columns: 1fr;
    }
  }
  
  .footer-section {
    h3, h4 {
      font-family: $font-display;
      color: $text-highlight;
      margin-bottom: $space-sm;
    }
    
    ul {
      list-style: none;
      
      li {
        margin-bottom: $space-xs;
        
        a {
          color: $text-inverse;
          text-decoration: none;
          
          &:hover {
            color: $text-accent;
          }
        }
      }
    }
  }
  
  .footer-bottom {
    text-align: center;
    padding-top: $space-md;
    border-top: 1px solid rgba($text-inverse, 0.2);
    font-size: $font-size-small;
  }
}

// Enhanced Grit Cursor System
.grit-cursor {
  position: fixed;
  top: 0;
  left: 0;
  width: 24px;
  height: 24px;
  pointer-events: none;
  z-index: $z-cursor;
  transition: transform 0.1s ease-out;
  
  .cursor-core {
    position: absolute;
    width: 8px;
    height: 8px;
    top: 8px;
    left: 8px;
    background: $blood-red;
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%); // Sharp triangle
    transform: rotate(45deg);
    transition: all 0.2s ease;
  }
  
  .cursor-trail {
    position: absolute;
    width: 24px;
    height: 24px;
    border: 2px solid rgba($blood-red, 0.3);
    clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);
    transform-origin: center;
    transition: all 0.3s ease;
  }
  
  // Hovering state - grows and changes to gold accent
  &.hovering {
    transform: scale(1.5);
    
    .cursor-core {
      background: $championship-gold;
      width: 12px;
      height: 12px;
      top: 6px;
      left: 6px;
      clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%); // Sharp star
    }
    
    .cursor-trail {
      border-color: rgba($championship-gold, 0.6);
      border-width: 3px;
      animation: cursor-pulse 0.6s ease-in-out infinite alternate;
    }
  }
  
  // Clicking state - sharp impact effect
  &.clicking {
    transform: scale(0.8);
    
    .cursor-core {
      background: $ghost-white;
      transform: rotate(45deg) scale(1.5);
      clip-path: polygon(40% 0%, 40% 40%, 100% 40%, 60% 40%, 60% 100%, 60% 60%, 0% 60%, 40% 60%); // Sharp cross
    }
    
    .cursor-trail {
      border-color: rgba($ghost-white, 0.8);
      transform: scale(0.5) rotate(45deg);
    }
  }
}

// Trail particles
#cursor-trail-particles {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: $z-cursor - 1;
}

.cursor-particle {
  position: absolute;
  pointer-events: none;
  clip-path: polygon(50% 0%, 0% 50%, 50% 100%, 100% 50%); // Sharp diamond
  opacity: 0.8;
  animation: particle-fade 0.5s ease-out forwards;
}

.cursor-ripple {
  width: 20px;
  height: 20px;
  border: 2px solid $blood-red;
  clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%); // Sharp octagon
  opacity: 0.6;
  transition: all 0.6s ease-out;
  pointer-events: none;
}

// Animations
@keyframes cursor-pulse {
  0% {
    transform: scale(1) rotate(0deg);
    opacity: 0.6;
  }
  100% {
    transform: scale(1.2) rotate(90deg);
    opacity: 0.9;
  }
}

@keyframes particle-fade {
  0% {
    opacity: 0.8;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0);
  }
}

// Hide cursor on touch devices
@media (hover: none) and (pointer: coarse) {
  .grit-cursor,
  #cursor-trail-particles {
    display: none;
  }
  
  body {
    cursor: auto !important;
  }
}

// Responsive Navigation
@media (max-width: $breakpoint-md) {
  .nav-brutalist {
    .nav-content {
      flex-direction: column;
      gap: $space-sm;
    }
    
    .nav-links {
      gap: $space-md;
      
      // Hide separators on mobile since nav stacks vertically
      li:not(:last-child)::after {
        display: none;
      }
      
      // Ensure active state works on mobile with higher specificity
      .nav-link.active {
        color: $text-highlight !important;
        border-bottom-color: $text-highlight !important;
      }
    }
  }
  
  main {
    margin-top: 120px; // Adjust for stacked nav
  }
}

// Extra small screens - reduce nav link spacing and size
@media (max-width: 530px) {
  .nav-brutalist {
    .nav-links {
      gap: $space-xs;
      
      .nav-link {
        font-size: $font-size-small;
      }
      
      // Android-specific active state fix
      .nav-link.active {
        color: $text-highlight !important;
        border-bottom-color: $text-highlight !important;
      }
    }
  }
}

// Android-specific fixes
@media screen and (-webkit-min-device-pixel-ratio: 0) {
  .nav-brutalist .nav-links .nav-link.active {
    color: $text-highlight !important;
    border-bottom: 2px solid $text-highlight !important;
  }
}
</style>